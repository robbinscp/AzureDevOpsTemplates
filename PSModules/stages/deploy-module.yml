parameters:
- name: ModuleName
  type: string
- name: RepoPath
  type: string
- name: RepoName
  type: string
- name: GitHubPAT
  type: string

stages:
- stage: Deploy
  dependsOn: Test
  #condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
    - job: Publish
      pool: Default
      workspace:
        clean: all
      steps:
      - checkout: none
      - task: DownloadPipelineArtifact@2
        inputs:
          artifactName: ${{ parameters.ModuleName }}
          targetPath: $(Build.ArtifactStagingDirectory)
      - template: ../steps/deploy/register-psrepository-step.yml
        parameters:
          RepoPath: ${{ parameters.RepoPath }}
          RepoName: ${{ parameters.RepoName }}
      - powershell: |
          Write-Host "$(Agent.TempDirectory)"
          gci "$(Agent.TempDirectory)"
          $module = (Import-PowerShellDataFile -Path '$(Build.ArtifactStagingDirectory)\${{ parameters.ModuleName }}\${{ parameters.ModuleName }}.psd1')
          foreach ($req in $module.RequiredModules) {
            Save-Module -Name $req -Path $(Agent.TempDirectory)
          }
        displayName: Download Module Dependencies
      - powershell: |
          $env:PSModulePath = $env:PSModulePath + [System.IO.Path]::PathSeparator + "$(Agent.TempDirectory)"
          gci "$(Agent.TempDirectory)"
          $test = (Test-ModuleManifest -Path '$(Build.ArtifactStagingDirectory)\${{ parameters.ModuleName }}\${{ parameters.ModuleName }}.psd1')
          if ($test.PrivateData.PSData.Prerelease) {
            $version = "$($test.version)-$($test.PrivateData.PSData.Prerelease)"
          } else {
            $version = $test.Version.ToString()
          }
          #$version = (Import-PowerShellDataFile -Path '$(Build.ArtifactStagingDirectory)\${{ parameters.ModuleName }}\${{ parameters.ModuleName }}.psd1').ModuleVersion
          Publish-Module -Path '$(Build.ArtifactStagingDirectory)\${{ parameters.ModuleName }}' -Repository '${{ parameters.RepoName }}' -Force
          Write-Host "INFO [task.setvariable variable=PackageVersion;isOutput=true]$version"
          Write-Host "##vso[task.setvariable variable=PackageVersion;isOutput=true]$version"
        displayName: Publish Module
        name: PublishModule
      - powershell: |
          gci env:
          $auth = '${{ parameters.GitHubPAT }}'
          $ghHeader = @{ Authorization = "Basic "+ [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($auth)) }

          $uribase = "https://github.umn.edu/api/v3/"

          $uri = $uribase + "repos/bajurny/modulebuildtests/releases"
          $body = @{
            tag_name=$env:PUBLISHMODULE_PACKAGEVERSION
            target_commitish= "$(Build.SourceVersion)"
            } |ConvertTo-Json
          write-host $body
          ($releases = Invoke-RestMethod -Uri $uri -Headers $ghHeader)
        displayName: Publish Release
    - deployment: Test
      #condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
      dependsOn: Publish
      variables:
        PackageVersion: $[ dependencies.Publish.outputs['PublishModule.PackageVersion']]
      environment:
        name: Production
        resourceType: VirtualMachine
        tags: tst
      strategy:
        rolling:
          deploy:
            steps:
              - template: ../steps/deploy/deployment-job-steps.yml
                parameters:
                  RepoPath: ${{ parameters.RepoPath }}
                  RepoName: ${{ parameters.RepoName }}
                  ModuleName: ${{ parameters.ModuleName }}
    - deployment: Production
      condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
      dependsOn: Publish
      variables:
        PackageVersion: $[ dependencies.Publish.outputs['PublishModule.PackageVersion']]
      environment:
        name: Production
        resourceType: VirtualMachine
        tags: prd
      strategy:
        rolling:
          deploy:
            steps:
              - template: ../steps/deploy/deployment-job-steps.yml
                parameters:
                  RepoPath: ${{ parameters.RepoPath }}
                  RepoName: ${{ parameters.RepoName }}
                  ModuleName: ${{ parameters.ModuleName }}
