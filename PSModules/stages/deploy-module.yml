parameters:
- name: ModuleName
  type: string
- name: RepoPath
  type: string
- name: RepoName
  type: string

stages:
- stage: Deploy
  dependsOn: Test
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
    - job: Publish
      pool: Default
      workspace:
        clean: all
      steps:
      - checkout: none
      - task: DownloadPipelineArtifact@2
        inputs:
          artifactName: ${{ parameters.ModuleName }}
          targetPath: $(Build.ArtifactStagingDirectory)
      - template: ../steps/deploy/register-psrepository-step.yml
        parameters:
          RepoPath: ${{ parameters.RepoPath }}
          RepoName: ${{ parameters.RepoName }}
      - powershell: |
          $version = (Test-ModuleManifest -Path '$(Build.ArtifactStagingDirectory)\${{ parameters.ModuleName }}\${{ parameters.ModuleName }}.psd1').Version.ToString()
          Publish-Module -Path '$(Build.ArtifactStagingDirectory)\${{ parameters.ModuleName }}' -Repository '${{ parameters.RepoName }}' -Force
          Write-Host "INFO [task.setvariable variable=PackageVersion;isOutput=true]$version"
          Write-Host "##vso[task.setvariable variable=PackageVersion;isOutput=true]$version"
        displayName: Publish Module
        name: PublishModule
    - deployment: Production
      dependsOn: Publish
      variables:
        PackageVersion: $[ dependencies.Publish.outputs['PublishModule.PackageVersion']]
      environment:
        name: Production
        resourceType: VirtualMachine
      strategy:
        rolling:
          deploy:
            steps:
              - download: none
              - template: ../steps/deploy/register-psrepository-step.yml
                parameters:
                  RepoPath: ${{ parameters.RepoPath }}
                  RepoName: ${{ parameters.RepoName }}
              - powershell: |
                  Get-PSRepository
                  find-module -Repository '${{ parameters.RepoName }}'
                  $LatestVersion = '$(PackageVersion)'
                  $Splat = @{
                      Name       = 'PSModule'
                      ModuleName = @{
                          ModuleName = 'PowershellGet'
                          ModuleVersion = '2.2.4'
                      }
                      Property   = @{
                          Name           = '${{ parameters.ModuleName }}'
                          MinimumVersion = $LatestVersion
                          Ensure         = 'Present'
                      }
                      Method = 'Set'
                  }
                  Invoke-DscResource @Splat -Verbose -ErrorAction Stop
